import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
var scene, camera, renderer, light;
function initscene() {
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 100, 30000);
    camera.position.set(-900, 200, -900);

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);
    // mouse control
    let controls = new OrbitControls(camera, renderer.domElement);
    controls.addEventListener('change', renderer);
    //
    //skybox
    let materialarray = [];
    let texture1 = new THREE.TextureLoader().load('arid2_ft.jpg');
    let texture2 = new THREE.TextureLoader().load('arid2_bk.jpg');
    let texture3 = new THREE.TextureLoader().load('arid2_up.jpg');
    let texture4 = new THREE.TextureLoader().load('arid2_dn.jpg');
    let texture5 = new THREE.TextureLoader().load('arid2_rt.jpg');
    let texture6 = new THREE.TextureLoader().load('arid2_lf.jpg');
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture1 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture2 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture3 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture4 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture5 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture6 }));
    for (let i = 0; i < 6; i++)
        materialarray[i].side = THREE.BackSide;
    let skyboxgeo = new THREE.BoxGeometry(10000, 10000, 10000);
    let skybox = new THREE.Mesh(skyboxgeo, materialarray);
    scene.add(skybox);
    //
    //air_plane model
    const loader1 = new GLTFLoader();
    loader1.load('assets/cesium__air.glb', function (glb) {
        const air_plane = glb.scene;

        air_plane.scale.set(100, 100, 100);

        scene.add(air_plane);
        // air_plane.translateY(4000);
    },
        undefined, function (error) {

            console.error(error);
        });
    //
    // man_player model
    const loader2 = new GLTFLoader();

    loader2.load('assets/man_player.glb', function (glb) {
        const man_player = glb.scene;
        // man_player.position.y(-5);
        man_player.scale.set(80, 80, 80);
        man_player.rotateY(-1.5);
        man_player.translateY(-150);
        man_player.translateZ(50);
        man_player.translateX(-370);
        scene.add(man_player);


    },
        undefined, function (error) {

            console.error(error);
        });

    //parachute model

    const loader3 = new GLTFLoader();

    loader3.load('assets/parachute_gta_san_andreas.glb', function (glb) {
        const parachute_gta_san_andreas = glb.scene;
        // man_player.position.y(-5);
        parachute_gta_san_andreas.scale.set(80, 80, 80);
        parachute_gta_san_andreas.rotateY(-1.5);
        parachute_gta_san_andreas.translateY(-50);
        parachute_gta_san_andreas.translateZ(25);
        parachute_gta_san_andreas.translateX(-370);

        scene.add(parachute_gta_san_andreas);

    },



        undefined, function (error) {

            console.error(error);
        });

    const loader4 = new GLTFLoader();
    loader4.load('assets/parachute.glb', function (glb) {
        const parachute = glb.scene;
        // man_player.position.y(-5);
        parachute.scale.set(80, 80, 80);
        parachute.rotateY(-1.5);
        parachute.translateY(-50);
        parachute.translateZ(25);
        parachute.translateX(-370);

        scene.add(parachute);

    },



        undefined, function (error) {

            console.error(error);
        });




    light = new THREE.DirectionalLight(0xffffff, 1)
    light.position.set(2, 2, 5)
    scene.add(light);
    animate();
}
function animate() {
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
}



initscene();