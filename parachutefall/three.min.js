//import Three.js Library
import * as THREE from 'three';
//for mouse Controller
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
//for model
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
//for Debug UI
import * as dat from 'dat.gui';

//نوع الحبل 550 paracord
const gravity = 9.8;
//ضغط الهواء
const p0 = 1.225;
//معامل السحب من أجل قانون مقاومة الهواء
const cD = 0.82;
//كثافة الهواء من أجل مقاومة الهواء
let air_density;
//المساحة المقطعية للمظلة 
let parachute_area;
let person_mass;
let velocity_x = 0;
let velocity_y = 0;
let free_velocity_y = 0;
let parachute_mass;
//ثابت من أجل قوة الرياح الجانبية و يتعلق بعدة عوامل منها مساحة الجملة الجانبية
let side_factor = 1.2;
let free_acc_y = 0;
let acc_y = 0;
let acc_x = 0;
//أوبجيكت للمظلة من أجل إدراج الموديل
let para = {};
//أوبجيكت للحقيبة من أجل إدراج الموديل
let bag = {}
//مقدار التمطيط للحبل
let variant = 0;
//محصلة السرعةالابتدائية و سرعة الرياح
let v = 0;
let wind_force;

//ال Debug لا يأخذ غير object
const gui = new dat.GUI();

const rope = {
    counts: 4,    //12
    length: 4,    //8
    area: 1       //4
};

const parachute_jump = {
    value: 2000
}

const wind = {
    velocity: 5
}

const Young = {
    factor: 3.5
}

// gui.add(rope, 'counts', 4, 12, 1).name('Rope Counts');
// gui.add(rope, 'area', 1, 4, 0.5).name('Rope area');
gui.add(parachute_jump, 'value');
gui.add(wind, 'velocity');
gui.add(Young, 'factor');

var scene, camera, renderer, light, heights = [];

let count = 0, data = []
let man = [], test_box = [];

function initScene()
{
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 10, 30000);
    camera.position.set(122, 2742, -2000);
    camera.lookAt(new THREE.Vector3(0, 10000, 1000));

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // mouse control
    let controls = new OrbitControls(camera, renderer.domElement);
    controls.addEventListener('change', renderer);

    //skybox
    let materialarray = [];

    let texture1 = new THREE.TextureLoader().load('arid2_ft.jpg');
    let texture2 = new THREE.TextureLoader().load('arid2_bk.jpg');
    let texture3 = new THREE.TextureLoader().load('arid2_up.jpg');
    let texture4 = new THREE.TextureLoader().load('arid2_dn.jpg');
    let texture5 = new THREE.TextureLoader().load('arid2_rt.jpg');
    let texture6 = new THREE.TextureLoader().load('arid2_lf.jpg');

    materialarray.push(new THREE.MeshBasicMaterial({ map: texture1 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture2 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture3 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture4 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture5 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture6 }));

    for (let i = 0; i < 6; i++)
        materialarray[i].side = THREE.BackSide;

    let skyboxgeo = new THREE.BoxGeometry(10000, 5000, 10000);
    //تلزيق
    let skybox = new THREE.Mesh(skyboxgeo, materialarray);
    skybox.position.y = 2500;
    scene.add(skybox);

    //مشان يقارن السرعة المنتظمة
    let boxgeo = new THREE.BoxGeometry(100, 100, 100);
    let box = new THREE.Mesh(boxgeo, materialarray);
    box.position.y = 4000;
    scene.add(box);
    heights.push(box);
    test_box.push(box);

    //air_plane model
    const loader1 = new GLTFLoader();
    loader1.load('assets/cesium__air.glb', function (glb)
    {
        const air_plane = glb.scene;

        air_plane.scale.set(100, 100, 100);
        air_plane.position.y = 3000;

        scene.add(air_plane);
        heights.push(air_plane)
    },
        undefined, function (error)
    {
        console.error(error);
    });

    // man_player model
    const loader2 = new GLTFLoader();
    loader2.load('assets/man_player.glb', function (glb)
    {
        const man_player = glb.scene;

        man_player.scale.set(100, 100, 100);
        man_player.position.y = 3000;

        scene.add(man_player);

        gui.add(man_player.scale, 'z', 60, 200, 1).onChange(() =>
        {
            person_mass = man_player.scale.z;
        })
            .name('Person Mass');
        person_mass = man_player.scale.z;

        heights.push(man_player);
        man.push(man_player);
    },
        undefined, function (error)
    {
        console.error(error);
    });

    //parachute model
    const loader3 = new GLTFLoader();
    loader3.load('assets/parachute_gta_san_andreas.glb', function (glb)
    {
        const parachute_gta_san_andreas = glb.scene;

        parachute_gta_san_andreas.scale.set(80, 80, 80);
        bag = parachute_gta_san_andreas
        parachute_gta_san_andreas.position.y = 3000;
        //على الظهر
        parachute_gta_san_andreas.translateZ(-25);

        scene.add(parachute_gta_san_andreas);

        gui.add(parachute_gta_san_andreas.scale, 'z', 40, 160, 1).onChange(() =>
        {
            parachute_mass = parachute_gta_san_andreas.scale.z / 8;
        })
            .name('Parachute Mass');
        parachute_mass = parachute_gta_san_andreas.scale.z / 8;

        heights.push(parachute_gta_san_andreas);
        man.push(parachute_gta_san_andreas)
    },
        undefined, function (error)
    {
        console.error(error);
    });

    const first_height = {
        y: 0
    }
    gui.add(first_height, 'y', 0, 4500, 1).onChange(function setHeight(value)
    {
        heights.forEach(w =>
        {
            console.log('Change');
            free_velocity_y = 0;

            variant = 0;
            acc_y = 0;
            acc_x = 0;
            velocity_y = 0
            velocity_x = 0
            w.position.y = value;
            w.position.x = 0;
        });
        //الإرجاع للوضع الأصلي
        heights.at(0).translateY(-50)
        heights.at(2).translateY(-150)
    })

    const first_loader4 = new GLTFLoader();
    first_loader4.load('assets/parachute.glb', function (glb)
    {
        const parachute = glb.scene;
        parachute.scale.set(40, 40, 40);

        parachute_area = parachute.scale.x / 5;
        gui.add(parachute.scale, 'x', 40, 100, 10).onChange(() =>
        {
            parachute_area = parachute.scale.x / 5;
        })
            .name('Parachute Area');

        rope.length = parachute.scale.y / 10;
        gui.add(parachute.scale, 'y', 40, 80, 10).onChange(() =>
        {
            rope.length = parachute.scale.y / 10;
        })
            .name('Rope length');

        para = parachute
    },
        undefined, function (error)
    {
        console.error(error);
    });

    light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(2, 2, -5);
    scene.add(light);

    animate();
}

console.time();
function animate()
{
    man.forEach(t =>
    {
        let mass = person_mass + parachute_mass;
        let weight_force = mass * gravity;
        air_density = p0 * Math.exp(-t.position.y / 8000);

        //التحقق من أن الرياح و الجملة لهما نفس الجهة
        if ((wind.velocity > 0 && velocity_x >= 0) || (wind.velocity < 0 && velocity_x <= 0))
            v = velocity_x + wind.velocity;
        else
            v = wind.velocity - velocity_x;

        if (t.position.y > parachute_jump.value)
        {
            if (count % 120 == 0)
            {
                console.timeLog('second');
            }
            console.log(count++);

            //رياح
            side_factor = 0.3;
            wind_force = side_factor * v;

            acc_x = wind_force / (mass || 110);
            console.log(`acc_x: ${acc_x.toFixed(4)}`);
            
            velocity_x += acc_x / 120;
            console.log(`velocity_x: ${velocity_x.toFixed(4)}`);

            t.position.x += velocity_x / 60;
            console.log(`x: ${t.position.x.toFixed(4)}`);

            // //سقوط الحر
            console.log(`free acc_y: ${free_acc_y.toFixed(4)}`);
            free_acc_y = gravity / 120;

            console.log(`free velocity_y: ${free_velocity_y.toFixed(4)}`);
            free_velocity_y += free_acc_y;

            velocity_y = free_velocity_y;

            console.log(`Height: ${t.position.y.toFixed(4)}`);
            t.position.y -= free_velocity_y / 60;
            console.log('free fall');
            scene.remove(para);
        }

        if (t.position.y <= parachute_jump.value && t.position.y >= 0)
        {
            let rope_force = weight_force / rope.counts;
            data['Rope Force'] = rope_force.toFixed(4);

            variant += ((rope_force * rope.length) / (rope.area * (Young.factor * 1000))) / 120;
            console.log(`variant: ${variant.toFixed(4)}`);

            let length_range = rope.length / 3;
            console.log(`length range: ${length_range.toFixed(4)}`);

            let longest = rope.length + length_range;
            console.log(`longest length: ${longest.toFixed(4)}`);

            let current_rope_now = rope.length + variant / 60;
            console.log(`Current rope: ${current_rope_now.toFixed(4)}`);

            if (current_rope_now.toFixed(4) >= parseFloat(longest.toFixed(4)))
            {
                data['current rope is cut on'] = t.position.y.toFixed(4);
                parachute_area = 0;
                parachute_mass = 0;
                scene.remove(para);

                velocity_y += gravity / 120;
                data['velocity_y'] = velocity_y.toFixed(4);

                t.position.y -= velocity_y / 60;
                data['Height'] = t.position.y.toFixed(4);

                console.log('free fall');

                side_factor = 0.3;
                wind_force = side_factor * v;
                acc_x = wind_force / (mass || 110);
                data['acc_x'] = acc_x.toFixed(4);

                velocity_x += acc_x / 120;
                data['velocity_x'] = velocity_x.toFixed(4);

                t.position.x += velocity_x / 60;
                data['x'] = t.position.x.toFixed(4);

                console.log(`acc_x: ${data.acc_x}
velocity_x: ${data.velocity_x}
x: ${data.x}
velocity_y: ${data.velocity_y}
Height: ${data.Height}
`);
            }
            else
            {
                para.position.x = t.position.x;
                para.position.y = t.position.y - 200;
                para.position.z = t.position.z;
                scene.add(para);
                scene.remove(bag);

                let air_resistance_force = 0.5 * velocity_y * velocity_y * air_density * parachute_area * cD;
                data['Air resistance Force'] = air_resistance_force.toFixed(4);

                acc_y = (weight_force - air_resistance_force) / mass;
                data['a_y'] = acc_y.toFixed(4);
                velocity_y += acc_y / 120;
                data['velocity_y'] = velocity_y.toFixed(4);
                data['Height'] = t.position.y.toFixed(4);
                t.position.y -= velocity_y / 60;

                side_factor = 1.2;
                wind_force = side_factor * v;
                data['acc_x'] = acc_x.toFixed(4);
                acc_x = wind_force / (mass || 110);

                data['velocity_x'] = velocity_x.toFixed(4);
                velocity_x += acc_x / 120;

                data['x'] = t.position.x.toFixed(4);
                t.position.x += velocity_x / 60;
            }
        }
        console.log(`acc_x: ${data.acc_x}
velocity_x: ${data.velocity_x}
x: ${data.x}
air_resistance: ${data['Air resistance Force']}
a_y: ${data.a_y}
velocity_y: ${data.velocity_y}
Height: ${ data.Height }
`);
        camera.position.set(t.position.x, t.position.y + 100, t.position.z - 500);
        camera.lookAt(new THREE.Vector3(0, 100, 100).add(man[0].position))
    });

    // test_box.forEach(b => {
    //     b.position.y -= 1/60;
    //     console.log(b.position.y);
    // });

    renderer.render(scene, camera);
    requestAnimationFrame(animate);
}

initScene();
