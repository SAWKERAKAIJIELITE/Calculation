import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import * as dat from 'dat.gui';

const gravity = 9.8;
const p0 = 1.225;
const cD = 0.9;
let height;
let air_density;
let parachute_area;
let person_mass;
let velocity_x = 0;
let velocity_y = 0;
let free_velocity_y = 0;
let parachute_mass;
let rope_counts;
let rope_length;
let rope_area;
let side_factor = 1.2;
let x = 0;
let free_acc_y = 0;

/**
 * Debug
 * 
 * Mass of Human (change on scale)          Done
 * Mass of Parachute (change on scale)      Done
 * wind_velocity                            Done
 * rope_counts
 * rope_length
 * rope_area
 * Young's factor                           Done
 * parachute_area
 * height                                   Done
*/
const gui = new dat.GUI();

const parachute_jump = {
    value: 2000
}

const wind = {
    velocity: 10
}

const Young = {
    factor: 3.5
}

gui.add(parachute_jump, 'value');
gui.add(wind, 'velocity');
gui.add(Young, 'factor');

var scene, camera, renderer, light, heights = [], clock;

let man = [], test_box = [];

function initScene() {
    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 30000);
    camera.position.set(-900, 200, -900);

    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // mouse control
    let controls = new OrbitControls(camera, renderer.domElement);
    controls.addEventListener('change', renderer);

    //skybox
    let materialarray = [];
    let texture1 = new THREE.TextureLoader().load('arid2_ft.jpg');
    let texture2 = new THREE.TextureLoader().load('arid2_bk.jpg');
    let texture3 = new THREE.TextureLoader().load('arid2_up.jpg');
    let texture4 = new THREE.TextureLoader().load('arid2_dn.jpg');
    let texture5 = new THREE.TextureLoader().load('arid2_rt.jpg');
    let texture6 = new THREE.TextureLoader().load('arid2_lf.jpg');

    materialarray.push(new THREE.MeshBasicMaterial({ map: texture1 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture2 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture3 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture4 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture5 }));
    materialarray.push(new THREE.MeshBasicMaterial({ map: texture6 }));

    for (let i = 0; i < 6; i++)
        materialarray[i].side = THREE.BackSide;
    let skyboxgeo = new THREE.BoxGeometry(10000, 5000, 10000);
    let skybox = new THREE.Mesh(skyboxgeo, materialarray);
    skybox.position.y = 2500;
    scene.add(skybox);

    let boxgeo = new THREE.BoxGeometry(100, 100, 100);
    let box = new THREE.Mesh(boxgeo, materialarray);
    box.position.y = 4000;
    scene.add(box);
    heights.push(box);
    test_box.push(box);

    //air_plane model
    const loader1 = new GLTFLoader();
    loader1.load('assets/cesium__air.glb', function (glb) {
        const air_plane = glb.scene;

        air_plane.scale.set(100, 100, 100);

        air_plane.position.y = 3000;
        scene.add(air_plane);
        heights.push(air_plane);
    },
        undefined, function (error) {
            console.error(error);
        });

    // man_player model
    const loader2 = new GLTFLoader();
    loader2.load('assets/man_player.glb', function (glb) {
        const man_player = glb.scene;
        man_player.scale.set(80, 80, 80);
        man_player.position.y = 2850;
        scene.add(man_player);

        gui.add(man_player.scale, 'z', 60, 100, 1).onChange(() => {
            person_mass = man_player.scale.z;
        })
            .name('Person Mass');
        person_mass = man_player.scale.z;

        heights.push(man_player);
        man.push(man_player);
    },
        undefined, function (error) {
            console.error(error);
        });

    //parachute model
    const loader3 = new GLTFLoader();
    loader3.load('assets/parachute_gta_san_andreas.glb', function (glb) {
        const parachute_gta_san_andreas = glb.scene;
        parachute_gta_san_andreas.scale.set(80, 80, 80);
        parachute_gta_san_andreas.translateY(2950);
        parachute_gta_san_andreas.translateZ(-50);

        scene.add(parachute_gta_san_andreas);

        gui.add(parachute_gta_san_andreas.scale, 'z', 40, 100, 1).onChange(() => {
            parachute_mass = parachute_gta_san_andreas.scale.z / 20;
        })
            .name('Parachute Mass');// รท20
        parachute_mass = parachute_gta_san_andreas.scale.z / 20;

        heights.push(parachute_gta_san_andreas);
    },
        undefined, function (error) {
            console.error(error);
        });

    const first_height = {
        y: 0
    }

    gui.add(first_height, 'y', -1000, 4500, 1).onChange(function setHeight(value) {
        heights.forEach(w => {
            w.position.y = value;
        });
        heights.at(0).translateY(-50)
        heights.at(2).translateY(-150)
    })

    light = new THREE.DirectionalLight(0xffffff, 1)
    light.position.set(2, 2, 5)
    scene.add(light);
    clock = new THREE.Clock();
    animate();
}

function animate() {

    const delta = clock.getDelta();
    man.forEach(t => {
        if (t.position.y > parachute_jump.value) {
            free_acc_y = gravity;
            free_velocity_y += free_acc_y;
            t.position.y -= free_velocity_y * 0.6 * delta;
            console.log('free fall with a =' + free_acc_y + 'and velocity_y =' + free_velocity_y + 'height' + t.position.y);
        }
        camera.position.set(t.position.x, t.position.y + 100, t.position.z + 100);
    });

    /*test_box.forEach(b => {
        b.position.y -= 60 * delta;
        console.log(b.position.y);
    });*/

    let weight_force = person_mass + parachute_mass;
    air_density = p0 * Math.exp(-height / 8000);

    renderer.render(scene, camera);
    requestAnimationFrame(animate);
}

initScene();

function logic() {
    if (height <= parachute_jump) {
        console.log('height =  ' + height);

        let air_resistance_force = 0.5 * velocity_y * velocity_y * air_density * parachute_area * cD;
        console.log('air_resistance_force = ' + air_resistance_force);

        v = v + (0.0001 * (height - (height - velocity_y)));
        console.log('  (height -(height - velocity_y))= ' + (height - (height - velocity_y)));

        console.log('v = ' + v);
        current_rope_now = rope_length + v;
        console.log('current rope is  ' + current_rope_now + ' on ' + height + 'm')
        parseFloat(current_rope_now.toFixed(2));
        console.log('current_rope_now.toFixed(5) is ' + current_rope_now.toFixed(2) + ' on ' + height + 'm')

        if (current_rope_now.toFixed(2) == all) {

            console.log('current rope is cut on ' + height);

            parachute_area = 0;
            parachute_mass = 0;

        }

        let wind_force = side_factor * (wind_velocity - velocity_x);
        let acc_x = wind_force / mass;
        console.log('acc_x in this ' + height + ' = ' + acc_x);

        velocity_x += acc_x;
        console.log('velocity_x in this ' + height + ' = ' + velocity_x);

        x += velocity_x
        console.log('x in this ' + height + ' = ' + x);

        let acc_y = (weight_force - air_resistance_force) / mass;
        console.log('a_y in this ' + height + ' = ' + acc_y);
        velocity_y += acc_y;
        console.log('velocity_y in this ' + height + ' = ' + velocity_y);
        height -= velocity_y;
    }
}